---
title: "Debugging"
author: "Shannon Pileggi"
footer:  "[Debugging](https://github.com/shannonpileggi/iterating-well-with-purrr)"
logo: "img/wtf-logo-square-transparent.png"
format: 
  revealjs: 
    theme: [night, slides.scss]
    highlight-style: a11y
    transition: fade
    slide-number: true
    chalkboard: true
editor: visual
execute:
  freeze: auto
---

# Getting started

```{r}
library(countdown)
```

```{r font-awesome-color}
# fill for font awesome icons
fa_fill <- "#C7B41D"
```

## Licensing

<br> Workshop materials have been adapted from the 2020 RStudio [What They Forgot To Teach You About R](https://rstats-wtf.github.io/wtf-2020-rsc/) Workshop.
<br> <br> This work is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/) (CC BY-SA4.0).

## Checklist

<br>

`r fontawesome::fa("check", fill = fa_fill)` R installed?
Pretty recent?

¬†¬†¬†¬† Current version 4.2.0

`r fontawesome::fa("check", fill = fa_fill)` RStudio installed?

¬†¬†¬†¬† I'm on 2022.02.3+492

## Additional resources {.smaller}

-   WTF Ch 11 *Debugging R code* <br> <https://rstats.wtf/debugging-r-code.html>

-   Advanced R Ch 22 *Debugging* <br> <https://adv-r.hadley.nz/debugging.html>

-   Jenny Bryan 2020 RStudio Conf Keynote *Object of type closure is not subsettable* <br> <https://github.com/jennybc/debugging#readme>

-   Amanda Gadrow 2018 Webinar *Debugging techniques in RStudio* <br> <https://www.rstudio.com/resources/webinars/debugging-techniques-in-rstudio/>

-   Jim Hester 2019 *Introduction to debugging in R and RStudio* <br> <https://www.jimhester.com/talk/2019-crug-debugging/>

-   Ma√´lle Salmon 2021 *How to become a better R code detective?* <br> <https://masalmon.eu/2021/07/13/code-detective/>

-   Kara Woo 2019 RStudio Conf *Box plots A case study in debugging and perseverance* <https://www.rstudio.com/resources/rstudioconf-2019/box-plots-a-case-study-in-debugging-and-perseverance/>

::: footer
:::

## 

```{r, out.width="20%"}
#| fig.cap: > 
#|   Artwork by [\@allison_horst](https://twitter.com/allison_horst).
#| fig.alt: > 
#|   A cartoon of a fuzzy round monster face showing 10 different emotions experienced during the process of debugging code. The 
#|   progression goes from (1) ‚ÄúI got this‚Äù - looking determined and optimistic; (2) ‚ÄúHuh. Really thought that was it.‚Äù - looking a bit
#|   baffled; (3) ‚Äú...‚Äù - looking up at the ceiling in thought; (4) ‚ÄúFine. Restarting.‚Äù - looking a bit annoyed; (5) ‚ÄúOH WTF.‚Äù Looking very
#|   frazzled and frustrated; (6) ‚ÄúZombie meltdown.‚Äù - looking like a full meltdown; (7) (blank) - sleeping; (8) ‚ÄúA NEW HOPE!‚Äù - a happy
#|   looking monster with a lightbulb above; (9) ‚Äúinsert awesome theme song‚Äù - looking determined and typing away; (10) ‚ÄúI love coding‚Äù -
#|   arms raised in victory with a big smile, with confetti falling.
knitr::include_graphics("img/debugging.jpg")
```

::: footer
<https://github.com/allisonhorst/stats-illustrations>
:::

# Troubleshooting

## 1. Search

<br>

-   Google *exact* error message

-   keyword search on [RStudio community](https://community.rstudio.com/)

-   keyword search on [stackoverflow](https://stackoverflow.com/), `[r]` tag

Samantha Csik 2022 R-Ladies St. Louis Workshop *Teach Me How To Google*: [slides](https://samanthacsik.github.io/teach-me-how-to-google/slides/RLadiesSTL-2022-02-22.html#1), [recording](https://youtu.be/93WsFQUuxvA)

## 2. Reset

<br>

::: r-fit-text
Have you tried turning it `OFF` and `ON` again?
:::

. . .

<br>

::: r-fit-text
Restart R, especially when things get weird.
:::

. . .

<br>

-   Session -\> Restart R, or

-   Ctrl + Shift + F10 (Windows),

-   Cmd + Shift + 0 / Cmd + Shift + F10 (Mac)

## 3. Reprex

::: r-fit-text
minimum `repr`oducible `ex`ample
:::

<brshort>

![](img/reprex-logo.png){fig-align="center"}

<brshort>

::: center-x
<https://reprex.tidyverse.org/>
:::

::: footer
*make a reprex..... please* by Sharla Gelfand (2021)

slides: <https://make-a-reprex-please.netlify.app/#1>

recording: <https://www.youtube.com/watch?v=G5Nm-GpmrLw>
:::

## minimum

![](img/haystack.PNG){fig-align="center"}

::: footer
Jenny Bryan (2020) *Object of type closure is not subsettable*

<https://github.com/jennybc/debugging>
:::

::: notes
MINIMAL: Don't wring hands and speculate.
Work a small concrete example that reveals, confirms, or eliminates something.
:::

## `repr`oducible `ex`ample

![](img/say_do.PNG){fig-align="center"}

::: footer
Jenny Bryan (2020) *Object of type closure is not subsettable*

<https://github.com/jennybc/debugging>
:::

::: notes
Reproducible example: No reliance on hidden state
:::

## why reprex

![](img/reprex-why.PNG){fig-align="center"}

::: footer
Jenny Bryan (2020) *Object of type closure is not subsettable*

<https://github.com/jennybc/debugging>
:::

## Review #1

<br>

Troubleshooting strategies:

<br>

1.  Search

2.  Reset

3.  Reprex

# Moving on

<br>

::: r-fit-text
from troubleshooting to...
:::

<brshort>

::: r-fit-text
formal `debugging` techniques.
:::

## Key concepts

<br>

`location` where did the error occur

<br>

`context` why did the error occur

<br>

`non-interactive` vs `interactive`

<br>

debugging `your code` vs `their code`

::: notes
interactive debugging: pause the execution of a function and launch environment where you can interactively explore what's happening
:::

## Methods

| Function                          | Use                                              |
|------------------------------|------------------------------------------|
| `print()` / `cat()` / `message()` | output diagnostic information in code            |
| `traceback()`                     | locate error                                     |
| `browser()`                       | open interactive debugger                        |
| `debug()` / `debugonce()`         | automatically open debugger when function called |
| `trace()`                         | start debugger at specific location in function  |

## Sourcing

<br>

‚ö†Ô∏è name your script with functions

<brshort>

‚ö†Ô∏è source your script with functions

<brshort>

for the best debugging experience üòé

<br>

![](img/source-marked.jpg)

## Set up

<br>

```{r, echo = TRUE, error = TRUE}
f <- function(x) {
  x + 1
}

g <- function(x) f(x)

g("a")
```

# Debugging your own code

## print()

```{r, eval=TRUE, echo=TRUE, error=TRUE, `code-line-numbers`="2"}
f <- function(x) {
  print(x)
  x + 1
}

g <- function(x) f(x)
```

```{r, eval=TRUE, echo=TRUE, error=TRUE, `code-line-numbers`="2"}
g("a")
```

::: notes
Insert numerous print statements to precisely locate the problem, and see the values of important variables.

Print debugging is slow and primitive, but it always works.

Can provide location by inserting print statements in different places, can provide context by seeing values.

can assess `location` by where `print` statement is inserted

can assess `context` by value printed

`non-interactive` debugging

good for `your code`
:::

## cat()

```{r, eval=TRUE, echo=TRUE, error=TRUE, `code-line-numbers`="2-3"}
f <- function(x) {
  cat("f()\n")
  cat("x =", x, "\n")
  x + 1
}

g <- function(x) f(x)

g("a")
```

::: notes
can assess `location` by where `print` statement is inserted

can assess `context` by value printed

`non-interactive` debugging

good for `your code`

print is handy to see full object; cat is handy to create smaller messages
:::

## traceback()

<br>

```{r, eval=FALSE, echo=TRUE, error = TRUE, `code-line-numbers`="3"}
source("demo/my_functions.R")
g("a")
traceback()
```

![](img/traceback.PNG)

<br>

shows the sequence of calls that lead to the error.

::: notes
used interactively in console, called for last error observed
:::

::: footer
the trace back is also known as: <br> call stack, stack trace, & back trace
:::

## Richer trace back

<br>

```{r, eval=FALSE, echo=TRUE, error = TRUE, `code-line-numbers`="2,4"}
source("demo/my_functions.R")
options(error = rlang::entrace) 
g("a")
rlang::last_error()
```

![](img/rlang_last-error.PNG)

## Richer trace back

<br>

```{r, eval=FALSE, echo=TRUE, error = TRUE, `code-line-numbers`="5"}
source("demo/my_functions.R")
options(error = rlang::entrace) 
g("a")
rlang::last_error()
rlang::last_trace()
```

![](img/rlang_last-trace.PNG)

<br>

`options(error = rlang::entrace)` <br> could go in your `.Rprofile`

## browser()

```{r, eval=FALSE, echo=TRUE, `code-line-numbers`="2"}
f <- function(x) {
  browser(x)
  x + 1
}

g <- function(x) f(x)
```

<br>

`browser()` opens the interactive debugger.

1.  Modify the function by inserting a `browser()` statement.

2.  Source the function.

3.  Execute the function.

## Interactive debugger

![](img/interactive-debugger.PNG)

## Interactive debugger tips

Investigate objects: `ls()`, `str()`, `ls.str()`, `print()`

. . .

<brshort>

Control execution:

| command | operation               |
|---------|-------------------------|
| `n`     | next statement          |
| `c`     | continue                |
| `s`     | step into function call |
| `f`     | finish loop / function  |
| `where` | show previous calls     |
| `Q`     | quit debugger           |

:::

# Debugging in RStudio

## Editor breakpoints

red circle = breakpoint = `browser()`

(but you don't have to change your code)

![](img/breakpoint.PNG)

. . .

Set / re-set an editor breakpoint:

-   click to the left of the line number in the source file

-   press Shift+F9 with your cursor on the line

## Editor breakpoints

red circle = breakpoint = `browser()`

(but you don't have to change your code)

![](img/breakpoint.PNG)

To activate, either

-   click IDE Source button, or

-   `debugSource(`"demo/my_functions.R"`)`

## IDE on error

Automatically invoke actions on error.

![](img/IDE_debug_menu.png){width="70%"}

## IDE on error options

![](img/IDE_debug_on-error.png){fig-align="left"}

## Debugging console

![](img/cheatsheet-debug-console.PNG)

## Error inspector

```{r, echo=TRUE, eval=FALSE}
# IDE Error Inspector not triggered
f <- function(x) x + 1
g <- function(x) f(x)
g("a")

# IDE Error Inspector not triggered
strsplit(factor("a,b"), ",")

# IDE Error Inspector not triggered
f <- function(x) strsplit(x, ",")
f(factor("a,b"))

# IDE Error Inspector yes triggered
g <- function(x) f(x)
g(factor("a,b"))

```

The error inspector is only invoked <br> if `your` `code` is involved.

# Debugging others' code

## debug()

`debug()` = `browser()`/ `breakpoint` in first line of function

```{r, eval=FALSE, echo=TRUE,`code-line-numbers`="4,7"}
# source if code is yours, otherwise not necessary
source("demo/my_functions.R")
# set debugging flag
debug("g")
g("a")
# turn off debugging flag
undebug("g")
```

. . .

-   interactive debugger is initiated every time `g()` is executed, until `undebug("g")`

-   depending on function internals, this can... trap you in the debugger üò¨

## debugonce()

`debugonce()` = `browser()`/ `breakpoint` in first line of function

```{r, eval=FALSE, echo=TRUE,`code-line-numbers`="4"}
# source if code is yours, otherwise not necessary
source("demo/my_functions.R")
# set debugging flag
debugonce("g")
g("a")
```

-   one time only!

-   interactive debugger initiated a **single** time when `g()` is executed

# Advanced debugging

## Trace

# Special cases

## Warnings

## Piped expressions

## Rmarkdown

## stuff

rmarkdown chunk option `error=TRUE`

`knitr::knit_exit()`

more

## Shiny
